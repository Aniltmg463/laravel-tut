## Step-by-Step Guide to Using Seeders
step 1: Create a Seeder File
php artisan make:seeder UserSeeder

This creates a file at:
database/seeders/UserSeeder.php

step2: Define Data in the Seeder
Edit UserSeeder.php:
use Illuminate\Database\Seeder;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

class UserSeeder extends Seeder
{
    public function run(): void
    {
        User::create([
            'name'     => 'Admin User',
            'email'    => 'admin@example.com',
            'password' => Hash::make('password'),
        ]);
    }
}

step3: Register Seeder in DatabaseSeeder
Open database/seeders/DatabaseSeeder.php and add your seeder inside the run() method:

public function run(): void
{
    $this->call([
        UserSeeder::class,
    ]);
}

step4: Run the Seeder
Run this Artisan command:

php artisan db:seed

This will execute the DatabaseSeeder, which calls UserSeeder.

✅ Optional: Run a Specific Seeder Only

php artisan db:seed --class=UserSeeder
✅ Bonus: Fresh Migration with Seeding
If you want to reset your database and re-run migrations and seeders:

php artisan migrate:fresh --seed
Let me know if you'd like help using Faker to generate dummy data, or to seed related tables (e.g., users with


## using factory to generate 10 random user
step1: php artisan make:seeder UserSeeder

step2:
database/seeders/UserSeeder.php:
use App\Models\User;
use Illuminate\Database\Seeder;

class UserSeeder extends Seeder
{
    public function run(): void
    {
        User::factory()->count(10)->create();
    }
}


step3:
DatabaseSeeder.php:
public function run(): void
{
    $this->call([
        UserSeeder::class,
    ]);
}


step4: 
php artisan db:seed

optional: php artisan migrate:fresh --seed


//encrypting
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Crypt;

public function definition(): array
{
    return [
        'name' => fake()->name(),
        'email' => fake()->unique()->safeEmail(),
        'email_verified_at' => now(),
        'password' => static::$password ??= Crypt::encrypt('password'),
        'remember_token' => Str::random(5),
    ];
}


✅ To Decrypt (for demonstration/testing):
$decrypted = Crypt::decrypt($user->password);



//using tinker:
step1: php artisan tinker

step2: 
$user = App\Models\User::first();
$decrypted = Crypt::decrypt($user->password);
echo $decrypted;


