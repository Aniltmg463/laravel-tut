Laravel Eloquent ORM Tutorial in Hindi / Urdu ep-31


yt : https://www.youtube.com/watch?v=otp-E6FHMnw&list=PL0b6OzIxLPbz7JK_YYrRJ1KxlGG4diZHJ&index=32


now: 11:43 sec

Step to work in Eloquent ORM
step1:
>php artisan make:model user --controller

step2:
use App\App\Models\User

class UserController extends Controller
{
public function show()
{
 $users = User::all();
return $users;
}
}


//
Read-> get()
Insert-> create()
Update -> update()
Delete -> delete()

sep3:
use App\Http\Controllers\UserController;

Route::get('\user',[UserController::class,'show']);

url : http://localhost/users/


>>Read Data with Eloquent ORM
select * from users -> User::all()

select name,city from users -> User::select('name','city')->get()

select * from users where city ='goa'
User::where('city','=','goa')->get()
User::where('city','=','goa')->where('age','>',18)->get()
User::where('city','=','goa')->orwhere('age','>',18)->get()

variant of where() are:
whereNot()
whereBetween()
whereIn()
whereNull()
whereNotNull()
whereMonth()
whereDate()
whereDay()
whereYear()
whereTime()

>>to create migration table :
step1:
php artisan make:migration create_posts_table //it will generate blueprint of table

step2:
>> database/migrations/xxxx_xx_xx_xxxxxx_create_posts_table.php
public function up(): void
{
    Schema::create('posts', function (Blueprint $table) {
        $table->id();
        $table->string('title');
        $table->text('content');
        $table->timestamps();
    });
}

step3:
>> php artisan migrate //it will generate tablw in db using migration which is blueprint
>> If you want to insert some dummy records for testing: cmd> php artisan tinker


>>if new blueprint of table column name are added or remove in create_post_table.php in migration
> php artisan migrate:rollback
> php artisan migrate
> php artisan db:seed



//to clear
php artisan optimize:clear
php artisan config:cache
php artisan route:cache

## Method 1: Using Seeder (Recommended for bulk fake data)
1. Install Faker (Laravel uses it by default)
No need to install manually — it comes with Laravel.

2. Create a seeder
Run this command:
>> php artisan make:seeder PostSeeder

3. Edit PostSeeder.php
File: database/seeders/PostSeeder.php

code: 
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Faker\Factory as Faker;

class PostSeeder extends Seeder
{
    public function run(): void
    {
        $faker = Faker::create();

        foreach (range(1, 10) as $index) {
            DB::table('posts')->insert([
                'name' => $faker->name,
                'email' => $faker->unique()->safeEmail,
                'age' => $faker->numberBetween(18, 60),
                'city' => $faker->city,
                'created_at' => now(),
                'updated_at' => now(),
            ]);
        }
    }
}

4. Register seeder in DatabaseSeeder.php
path: database/seeders/DatabaseSeeder.php:

public function run(): void
{
    $this->call([
        PostSeeder::class,
    ]);
}

5. Run the seeder
> php artisan db:seed

✅ Method 2: Using Laravel Tinker (Quick insert)
>> php artisan tinker
Then run inside Tinker:

>> \App\Models\post::factory()->create([
    'name' => 'Anil Tamang',
    'email' => 'anil@example.com',
    'age' => 25,
    'city' => 'Kathmandu',
]);

//creating form using boostrap:
>  .container>.row>.col-7
>  .table.table.table-striped.table-border


now 31:24 break:

time:38:40sec 
//Laravel: Raw methods for Eloquent ORM...
-> normal                                 --> VS   -->                          Raw

user::select('name','age')->get();                  user::selectRaw('name,age')->get();

user::where('age','>','20')->get();                 user::whereRaw('age > 20')->get();

user::orderBy('age','city')->get();                 user::orderByRaw('age,city')->get();

// Laravel: Determining if Records Exist
if(User::where('id',1)->exists()){                  ..

}

if(User::where('id',1)->doesntexists()){                  ..

}

//Laravel:Join Tables with Eloquent ORM

inner join   ->join()
left join    ->LeftIoin()
right join   -> rightJoin()
cross join   -> crossJoin()

>Union()
>When()
>Chunk()






……………………………….……………………………….……………………………….……………………………….……………………………….……………………………….……………………………….……………………………….……………………………….……………………………….……………………………….……………………………….


